- name: check dashboard url
  uri:
    url: 'http://{{ nginx_keepalived_vip }}:30000'
    return_content: yes
  register: this
  failed_when: "'Client sent an HTTP request to an HTTPS server' not in this.content"

#- name: check traefik dashboard url
#  uri:
#    url: 'http://{{ nginx_keepalived_vip }}:31000/dashboard'
#    return_content: yes
#  register: this
#  failed_when: this.status != 200
#
#- name: check grafana dashboard url
#  uri:
#    url: 'http://{{ nginx_keepalived_vip }}:30004'
#    return_content: yes
#  register: this
#  failed_when: this.status != 200
#
#- name: check prometheus dashboard url
#  uri:
#    url: 'http://{{ nginx_keepalived_vip }}:30002'
#    return_content: yes
#  register: this
#  failed_when: this.status != 200
#
#- name: check kibana dashboard url
#  uri:
#    url: 'http://{{ nginx_keepalived_vip }}:30001'
#    return_content: yes
#  register: this
#  failed_when: this.status != 200

- name: check traefik dashboard url
  uri:
    url: 'http://{{ nginx_keepalived_vip }}'
    return_content: yes
  register: this
  failed_when: this.status != 404

- name: redis connect string
  shell: |
    redis_connect_string='{{ groups["redis"] | map("regex_replace", "^(.*)$","\1:6379") | join(",") }}'
    echo $redis_connect_string
  register: redis_connect_string

- name: rocketmq namesrv
  shell: |
    rocketmq_namesrv="{{ groups['rocketmq-namesrv'] | map('regex_replace', '^(.*)$','\1:9876') | join(';') }}"
    echo $rocketmq_namesrv
  register: rocketmq_namesrv

- name: rocketmq console
  shell: |
    rocketmq_console="{{ groups['rocketmq-console'] | map('regex_replace', '^(.*)$','http://\1:8080') | join(' ') }}"
    echo $rocketmq_console
  register: rocketmq_console

- name: copy kube-component file
  template:
    src: kube-component.md.j2
    dest: '{{ kube_component_file }}'
    mode: 0755

- name: kubernetes dashboard
  vars:
    dashboard_url: 'https://{{ nginx_keepalived_vip }}:30000'
  shell: |
    namespaces=$(kubectl get secret -A | grep admin | awk '{print $1}')
    for namespace in ${namespaces[@]} ; do
        token=$(kubectl -n $namespace describe secret $(kubectl -n $namespace get secret | grep admin | awk '{print $1}') | grep "token:")
        echo "| k8s-dashboard-$namespace | {{ dashboard_url }} | $token |" >> {{ kube_component_file }}
    done

- name: ravencast dashboard
  vars:
    ravencast_groups: '{{ groups | select("match","ravencast-.*") | list }}'
  shell: |
    {% for group_name in ravencast_groups %}
      ravencast_dashboard="{{ groups[group_name] | map('regex_replace', '^(.*)$','http://\1:10103') | join(' ') }}"
      echo "| {{ group_name }} | $ravencast_dashboard | ravencast/integration |" >> {{ kube_component_file }}
    {% endfor %}

- name: fetch result to ansible node
  fetch:
    src: '{{ kube_component_file }}'
    dest: '/etc/ansible'