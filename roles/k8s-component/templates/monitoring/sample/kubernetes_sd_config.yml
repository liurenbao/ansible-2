# The information to access the Kubernetes API.

# The API server addresses. If left empty, Prometheus is assumed to run inside
# of the cluster and will discover API servers automatically and use the pod's
# CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
[ api_server: <host> ]

# The Kubernetes role of entities that should be discovered.
# One of endpoints, service, pod, node, or ingress.
role: <string>

  # Optional path to a kubeconfig file.
  # Note that api_server and kube_config are mutually exclusive.
  [ kubeconfig_file: <filename> ]

# Optional authentication information used to authenticate to the API server.
# Note that `basic_auth` and `authorization` options are mutually exclusive.
# password and password_file are mutually exclusive.

# Optional HTTP basic authentication information.
basic_auth:
  [ username: <string> ]
    [ password: <secret> ]
    [ password_file: <string> ]

# Optional `Authorization` header configuration.
authorization:
  # Sets the authentication type.
    [ type:
        <string> | default: Bearer ]
    # Sets the credentials. It is mutually exclusive with
    # `credentials_file`.
    [ credentials: <secret> ]
    # Sets the credentials to the credentials read from the configured file.
    # It is mutually exclusive with `credentials`.
    [ credentials_file: <filename> ]

# Optional OAuth 2.0 configuration.
# Cannot be used at the same time as basic_auth or authorization.
oauth2:
  [ <oauth2> ]

    # Optional proxy URL.
    [ proxy_url: <string> ]

    # Configure whether HTTP requests follow HTTP 3xx redirects.
    [ follow_redirects: <bool> | default = true ]

# TLS configuration.
tls_config:
  [ <tls_config> ]

# Optional namespace discovery. If omitted, all namespaces are used.
namespaces:
  names:
    [ - <string> ]

  # Optional label and field selectors to limit the discovery process to a subset of available resources.
  # See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/
  # and https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ to learn more about the possible
  # filters that can be used. Endpoints role supports pod, service and endpoints selectors, other roles
  # only support selectors matching the role itself (e.g. node role can only contain node selectors).

  # Note: When making decision about using field/label selector make sure that this
  # is the best approach - it will prevent Prometheus from reusing single list/watch
  # for all scrape configs. This might result in a bigger load on the Kubernetes API,
  # because per each selector combination there will be additional LIST/WATCH. On the other hand,
  # if you just want to monitor small subset of pods in large cluster it's recommended to use selectors.
  # Decision, if selectors should be used or not depends on the particular situation.
  [ selectors:
      [ - role: <string>
        [ label: <string> ]
        [ field: <string> ] ] ]