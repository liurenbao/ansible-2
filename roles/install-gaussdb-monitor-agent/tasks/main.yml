- name: check if old process exists
  stat:
    path: "{{ gaussdb_monitor_agent_root_dir }}/{{ gaussdb_user }}/start-agent.sh"
  register: old_monitor

- name: stop existed monitor process
  become: yes
  become_user: '{{ gaussdb_user }}'
  shell: "{{ gaussdb_monitor_agent_root_dir }}/{{ gaussdb_user }}/start-agent.sh stop"
  when: old_monitor.stat.exists == true

- name: remove omm old crontab line
  lineinfile:
    path: '/var/spool/cron/{{ gaussdb_user }}'
    line: "{{ item }}"
    state: absent
  with_items:
    - "#Ansible: gaussdb agent job"
    - "*/1 * * * * source ~/.bashrc && /data01/gaussdb-monitor-agent/{{ gaussdb_user }}/start-agent.sh check"
    - "*/2 * * * * /data01/filebeat/filebeat_monitor.sh"

- name: remove existed monitor app files
  file:
    path: "{{ gaussdb_monitor_agent_root_dir }}/{{ gaussdb_user }}"
    state: absent

- name: ensure monitor user exist
  user:
    name: '{{ gaussdb_monitor_user }}'
    group: '{{ gaussdb_user_group }}'
    password: '{{ gaussdb_monitor_user }}'
    state: present

- name: ensure monitor user's permission
  lineinfile:
    path: /etc/sudoers
    insertafter: "%wheel  ALL=(ALL)       ALL"
    regexp: "^db_monitor"
    line: "db_monitor ALL=({{ gaussdb_user }}) NOPASSWD: ALL"
    state: present

- name: ensure monitor cron permission
  lineinfile:
    path: /etc/cron.allow
    line: "db_monitor"
    state: present

- name: create agent root dir
  file:
    path: '{{ gaussdb_monitor_agent_root_dir }}'
    state: directory

- name: create wsr dir
  file:
    path: /wsr
    state: directory
    owner: '{{ gaussdb_monitor_user }}'
    group: '{{ gaussdb_user_group }}'

- name: send agent application.yml
  template:
    src: agent/application.yml.j2
    dest: '{{ gaussdb_monitor_agent_root_dir }}/application.yml'

- name: send agent jar
  copy:
    src: agent/hisi-uoamp-monitor-agent-1.0-SNAPSHOT.jar
    dest: '{{ gaussdb_monitor_agent_root_dir }}/agent.jar'

- name: copy gaussdb agent startup shell
  template:
    src: start-agent.sh.j2
    dest: '{{ gaussdb_monitor_agent_root_dir }}/start-agent.sh'
    mode: 0755

- name: stop old agent process
  become: yes
  become_user: '{{ gaussdb_monitor_user }}'
  shell: "{{ gaussdb_monitor_agent_root_dir }}/start-agent.sh stop"

- name: remove old agent logs
  file:
    path: "{{ gaussdb_monitor_agent_root_dir }}/logs"
    state: absent

- name: create cron job for db agent
  become_user: '{{ gaussdb_monitor_user }}'
  become: yes
  cron:
    name: gaussdb agent job
    job: '{{ gaussdb_monitor_agent_root_dir }}/start-agent.sh check'
    minute: "*/1"

- name: chmod agent dir
  file:
    path: '{{ gaussdb_monitor_agent_root_dir }}'
    state: directory
    owner: '{{ gaussdb_monitor_user }}'
    group: '{{ gaussdb_user_group }}'
    recurse: yes

- name: check logs dir exist
  stat:
    path: "{{ gaussdb_monitor_agent_root_dir }}/logs"
  register: log_dir


- name: wait client ready
  wait_for:
    port: 9998
    timeout: 120
  failed_when: log_dir.stat.exists == false

- name: chmod agent dir
  file:
    path: '{{ gaussdb_monitor_agent_root_dir }}'
    state: directory
    owner: '{{ gaussdb_monitor_user }}'
    group: '{{ gaussdb_user_group }}'
    recurse: yes

- name: send filebeat.yml
  template:
    src: filebeat.yml.j2
    dest: /etc/filebeat/filebeat.yml

- name: chmod filebeat dir
  file:
    path: '{{ item }}'
    owner: '{{ gaussdb_user }}'
    group: '{{ gaussdb_user_group }}'
    recurse: yes
  with_items:
    - /etc/filebeat
    - /var/lib/filebeat
    - /usr/share/filebeat

- name: chmod filebeat file
  file:
    path: '{{ item }}'
    owner: '{{ gaussdb_user }}'
    group: '{{ gaussdb_user_group }}'
  with_items:
    - /usr/bin/filebeat
    - /etc/rc.d/init.d/filebeat

- name: override filebeat.service
  template:
    src: filebeat.service.j2
    dest: /usr/lib/systemd/system/filebeat.service

- name: start gaussdb filebeat systemd service
  systemd:
    name: filebeat
    daemon_reload: yes
    state: restarted
    enabled: yes