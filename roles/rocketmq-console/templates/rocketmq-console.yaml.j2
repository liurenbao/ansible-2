apiVersion: v1
kind: Namespace
metadata:
  name: rocketmq
---
apiVersion: settings.k8s.io/v1alpha1
kind: PodPreset
metadata:
  name: change-timezone
  namespace: rocketmq
spec:
  selector:
    matchLabels: {}
  env:
    - name: TZ
      value: "Asia/Shanghai"
  volumeMounts:
    - name: timezone
      mountPath: /etc/localtime
  volumes:
    - name: timezone
      hostPath:
        path: /etc/localtime
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rocketmq-console
  namespace: rocketmq
  labels:
    app: rocketmq-console
spec:
  replicas: 1
  template:
    metadata:
      name: rocketmq-console
      labels:
        app: rocketmq-console
    spec:
      containers:
        - name: rocketmq-console
          image: "{{ image_repository }}/public/rocketmq-console:2.0.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: NAMESRV_ADDR
              value: '{{ groups["rocketmq-namesrv"] | map("regex_replace", "^(.*)$", "\\1:9876") | join(";") }}'
            - name: DATA_PATH
              value: "/var/lib/rocketmq-console/data"
          resources:
            requests:
              cpu: 200m
              memory: 300Mi
            limits:
              cpu: '2'
              memory: 2Gi
          startupProbe:
            httpGet:
              port: 8080
              path: /view/pages/login.html
            initialDelaySeconds: 20
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              port: 8080
              path: /view/pages/login.html
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              port: 8080
              path: /view/pages/login.html
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 5

      restartPolicy: Always
  selector:
    matchLabels:
      app: rocketmq-console
---
apiVersion: v1
kind: Service
metadata:
  name: rocketmq-console
  namespace: rocketmq
spec:
  selector:
    app: rocketmq-console
  ports:
    - port: 8080
  type: ClusterIP
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: rocketmq-console
  namespace: rocketmq
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: Host(`rocketmq-console-uat.cicem.fa`)
      services:
        - name: rocketmq-console
          port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rocketmq-exporter
  namespace: rocketmq
  labels:
    app: rocketmq-exporter
spec:
  replicas: 1
  template:
    metadata:
      name: rocketmq-exporter
      labels:
        app: rocketmq-exporter
    spec:
      containers:
        - name: rocketmq-exporter
          image: '{{ image_repository }}/public/rocketmq-exporter:0.0.2'
          imagePullPolicy: IfNotPresent
          args:
            - '--rocketmq.config.namesrvAddr={{ groups["rocketmq-namesrv"] | map("regex_replace", "^(.*)$", "\\1:9876") | join(";") }}'
          resources:
            requests:
              cpu: 200m
              memory: 300Mi
            limits:
              cpu: '2'
              memory: 2Gi
          startupProbe:
            httpGet:
              port: 5557
              path: /metrics
            initialDelaySeconds: 20
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              port: 5557
              path: /metrics
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              port: 5557
              path: /metrics
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
            timeoutSeconds: 5
      restartPolicy: Always
  selector:
    matchLabels:
      app: rocketmq-exporter
---
apiVersion: v1
kind: Service
metadata:
  name: rocketmq-exporter
  namespace: rocketmq
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: '5557'
    prometheus.io/scheme: "http"
    prometheus.io/path: '/metrics'
spec:
  selector:
    app: rocketmq-exporter
  ports:
    - port: 5557
  type: ClusterIP