namespace: monitoring
# number of replicas to run
replicaCount: 1

# number of helm release revisions to retain
revisionHistoryLimit: 5

# Default internal between alert checks against the elasticsearch datasource, in minutes
runIntervalMins: 1

# Default rule buffer duration, in minutes
bufferTimeMins: 15

# Amount of time to retry and deliver failed alerts (1440 minutes per day)
alertRetryLimitMins: 2880

# Default time before realerting, in minutes
realertIntervalMins: ""

# For ES 5: The name of the index which stores elastalert 2 statuses, typically elastalert_status
# For ES 6: The prefix of the names of indices which store elastalert 2 statuses, typically elastalert
#
writebackIndex: elastalert

image:
  # docker image
  repository: 10.12.107.150:80/public/elastalert2
  # docker image tag
  tag: 2.2.3
  pullPolicy: IfNotPresent
  pullSecret: ""

resources:
  limits:
    cpu: "2"
    memory: 2048Mi
  requests:
    cpu: "0.2"
    memory: 500Mi

# Annotations to be added to pods
podAnnotations: { }

elasticsearch:
  # elasticsearch endpoint e.g. (svc.namespace||svc)
  host: elasticsearch.elk
  # elasticsearch port
  port: 9200
  # whether or not to connect to es_host using TLS
  useSsl: "False"
  # Username if authenticating to ES with basic auth
  username: ""
  # Password if authenticating to ES with basic auth
  password: ""
  # Specifies an existing secret to be used for the ES username/password
  credentialsSecret: ""
  # The key in elasticsearch.credentialsSecret that stores the ES password
  credentialsSecretUsernameKey: ""
  # The key in elasticsearch.credentialsSecret that stores the ES username
  credentialsSecretPasswordKey: ""
  # whether or not to verify TLS certificates
  verifyCerts: "True"
  # Enable certificate based authentication
  # path to a PEM certificate to use as the client certificate
  # clientCert: "/certs/client.pem"
  # path to a private key file to use as the client key
  # clientKey: "/certs/client-key.pem"
  # path to a CA cert bundle to use to verify SSL connections
  # caCerts: "/certs/ca.pem"
  # # certs volumes, required to mount ssl certificates when elasticsearch has tls enabled
  # certsVolumes:
  #   - name: es-certs
  #     secret:
  #       defaultMode: 420
  #       secretName: es-certs
  # # mount certs volumes, required to mount ssl certificates when elasticsearch has tls enabled
  # certsVolumeMounts:
  #   - name: es-certs
  #     mountPath: /certs
  #     readOnly: true

# Optional env variables for the pod
optEnv: [ ]

extraConfigOptions:
  # Options to propagate to all rules, e.g. a common slack_webhook_url or kibana_url
  # Please note at the time of implementing this value, it will not work for required_locals
  # Which MUST be set at the rule level, these are: ['alert', 'type', 'name', 'index']
  generate_kibana_link: true
  kibana_url: http://kibana-uat.cicem.fa
  # slack_webhook_url: dummy

# To load ElastAlert 2 config via secret, uncomment the line below
secretConfigName: elastalert-config-secret

# To load ElastAlert's rules via secret, uncomment the line below
#secretRulesName: elastalert-rules-secret

# Additionally, you must specificy which rules to load from the secret
#secretRulesList: [ "rule_1", "rule_2" ]

# Example of secret rules

#apiVersion: v1
#kind: Secret
#metadata:
#  name: elastalert-rules-secret
#  namespace: elastic-system
#type: Opaque
#stringData:
#   rule_1: |-
#     name: Rule 1
#     type: frequency
#     index: index1-*
#     num_events: 3
#     timeframe:
#       minutes: 1
#     alert:
#     - "slack"
#   rule_2: |-
#     name: Rule 2
#     type: frequency
#     index: index2-*
#     num_events: 5
#     timeframe:
#       minutes: 10
#     alert:
#     - "slack"

# Command and args override for container e.g. (https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
# command: ["YOUR_CUSTOM_COMMAND"]
args: ["--debug"]

# rule configurations e.g. (http://elastalert2.readthedocs.io/en/latest/)
rules:
  nginx: |-
    ---
    name: Rule 1
    type: frequency
    index: log-nginx-nginx-*
    num_events: 3
    timeframe:
      minutes: 3
    filter:
      - term:
          message: "ERROR"
    alert:
      - email:
          from_addr: "alertmanager@cicem.fa"
          email: "tangjizhou@cicem.fa"
          smtp_host: "10.12.107.121"
          smtp_port: 587
          smtp_ssl: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations:
    generate-at: "2022-02-14"
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: elastalert2

# Enable pod security policy
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/
# DEPRECATED in Kubernetes 1.21 (https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/)
podSecurityPolicy:
  create: false

securityContext:
  runAsNonRoot: true
  runAsUser: 1000

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000

# Support using node selectors and tolerations
# nodeSelector:
#   "node-role.kubernetes.io/infra_worker": "true"
nodeSelector: { }

# Specify node affinity or anti-affinity specifications
affinity: { }

tolerations:
  - key: node.kubernetes.io/not-ready
    operator: Exists
    effect: NoExecute
    tolerationSeconds: 2
  - key: node.kubernetes.io/unreachable
    operator: Exists
    effect: NoExecute
    tolerationSeconds: 2

extraVolumes:
  - name: smtp-auth
    secret:
      secretName: elastalert-smtp-auth
      items:
        - key: smtp_auth.yaml
          path: smtp_auth.yaml
          mode: 0400

extraVolumeMounts:
  - name: smtp-auth
    mountPath: /opt/elastalert/config-smtp/smtp_auth.yaml
    subPath: smtp_auth.yaml
    readOnly: true
