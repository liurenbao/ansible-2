apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: traefik

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik
  namespace: traefik
  labels:
    app: traefik
spec:
  replicas: 8
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: traefik
      nodeSelector:
        traefik: 'true'
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - traefik
      serviceAccountName: traefik-ingress-controller
      containers:
        - name: traefik
          image: "{{ image_repository }}/traefik/traefik:v2.4.9"
          args:
            - --log.level=DEBUG
            - --accesslog
            - --api
            - --api.insecure
            - --entrypoints.web.address=:80
            - --entrypoints.websecure.address=:443
            - --entrypoints.tcpep.address=:8000
            - --entrypoints.udpep.address=:9000/udp
            - --providers.kubernetescrd
            - --metrics.prometheus=true
            - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
            - --metrics.prometheus.addEntryPointsLabels=true
            - --entryPoints.metrics.address=:8082
            - --metrics.prometheus.entryPoint=metrics
            - --metrics.prometheus.addServicesLabels=true
          ports:
            - name: web
              containerPort: 80
            - name: websecure
              containerPort: 443
            - name: admin
              containerPort: 8080
            - name: tcpep
              containerPort: 8000
            - name: udpep
              containerPort: 9000
          resources:
            requests:
              cpu: '1'
              memory: '300Mi'
          startupProbe:
            httpGet:
              port: 8080
              path: /dashboard
            initialDelaySeconds: 10
            successThreshold: 1
            periodSeconds: 3
          readinessProbe:
            httpGet:
              port: 8080
              path: /dashboard
            successThreshold: 1
            periodSeconds: 3
          livenessProbe:
            httpGet:
              port: 8080
              path: /dashboard
            successThreshold: 1
            periodSeconds: 3
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: traefik
  annotations:
    prometheus.io/http-probe: "true"
    prometheus.io/http-probe-port: "8080"
    prometheus.io/http-probe-path: "/dashboard"
    prometheus.io/scrape: "true"
    prometheus.io/port: '8082'
    prometheus.io/scheme: "http"
    prometheus.io/path: '/metrics'
spec:
  selector:
    app: traefik
  ports:
    - protocol: TCP
      port: 8080
      name: admin
      targetPort: 8080
      nodePort: 31000
    - protocol: TCP
      port: 80
      name: web
      targetPort: 80
      nodePort: 31001
    - protocol: TCP
      port: 8000
      name: tcpep
      targetPort: 8000
      nodePort: 31002
    - protocol: UDP
      port: 9000
      name: udpep
      targetPort: 9000
      nodePort: 31003
    - protocol: TCP
      port: 8082
      name: prometheus
      targetPort: 8082
      nodePort: 31004
    - protocol: TCP
      port: 443
      name: websecure
      targetPort: 443
      nodePort: 31005
  externalTrafficPolicy: Local
  type: NodePort