# deployment配置必需：启动，存活，就绪三探针，优雅停机配置，资源request和limit，故障节点容忍，双机房部署配置

apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: settings.k8s.io/v1alpha1
kind: PodPreset
metadata:
  name: change-timezone
  namespace: test
spec:
  selector:
    matchLabels:
  env:
    - name: TZ
      value: "Asia/Shanghai"
  volumeMounts:
    - name: timezone
      mountPath: /etc/localtime
  volumes:
    - name: timezone
      hostPath:
        path: /usr/share/zoneinfo/Asia/Shanghai
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-monitoring
  namespace: test
  labels:
    app: demo-monitoring
spec:
  selector:
    matchLabels:
      app: demo-monitoring
  replicas: 1
  template:
    metadata:
      name: demo-monitoring
      labels:
        app: demo-monitoring
    spec:
      containers:
        - name: demo-monitoring
          image: 192.168.160.47:8888/public/demo-monitoring:1.0
          imagePullPolicy: Always
          env:
            - name: INTERVAL
              value: '2000'
          # 三探针
          startupProbe:
            httpGet:
              port: 8080
              path: /demo-monitoring/actuator/health
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              port: 8080
              path: /demo-monitoring/actuator/health
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 8080
              path: /demo-monitoring/actuator/health
          # 资源限制
          resources:
            limits:
              cpu: '2'
              memory: 200Mi
            requests:
              cpu: '200m'
              memory: 100Mi
          # 优雅停机
          lifecycle:
            preStop:
              exec:
                command: [ "sleep" ,"40" ]
      terminationGracePeriodSeconds: 120
      restartPolicy: Always
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
---
# 集群内部服务监控
apiVersion: v1
kind: Service
metadata:
  name: demo-monitoring
  namespace: test
  annotations:
    # 以下 tcp/http检测应用可用性，二选一（和健康检查不同，此处需检测应用依赖项，如消息队列，缓存，数据库等）

    # 使用tcp检测应用可用性，自动获取service的port字段
    prometheus.io/tcp-probe: "true"

    # 使用http检测应用可用性，手动提供支持http检测的端口
    prometheus.io/http-probe: "true"
    prometheus.io/http-probe-port: "8080"
    prometheus.io/http-probe-path: "/demo-monitoring/actuator/health"

    # 抓取应用的监控指标,路径不填写则为：/metrics
    prometheus.io/scrape: "true"
    prometheus.io/port: '8080'
    prometheus.io/scheme: "http"
    prometheus.io/path: '/demo-monitoring/actuator/prometheus'
spec:
  selector:
    app: demo-monitoring
  ports:
    - port: 8080
---
# 以下2组为集群外部服务的监控方式，metadata.name字段需要相同
apiVersion: v1
kind: Endpoints
metadata:
  name: ravencast-service
  namespace: test
subsets:
  # 外部服务的IP和端口
  - addresses:
      - ip: 192.168.161.208
      - ip: 192.168.161.209
    ports:
      - port: 9998
---
apiVersion: v1
kind: Service
metadata:
  name: ravencast-service
  namespace: test
  annotations:
    # 以下 tcp/http检测应用可用性，二选一（和健康检查不同，此处需检测应用依赖项，如消息队列，缓存，数据库等）

    # 使用tcp检测应用可用性，自动获取service的port字段
    prometheus.io/tcp-probe: "true"
    # 使用http检测应用可用性，手动提供支持http检测的端口
    prometheus.io/http-probe: "true"
    prometheus.io/http-probe-port: "8080"
    prometheus.io/http-probe-path: "/demo-monitoring/actuator/health"

    # 抓取应用的监控指标,路径不填写则为：/metrics
    prometheus.io/scrape: "true"
    prometheus.io/port: "9998"
    prometheus.io/scheme: "http"
    prometheus.io/path: "/"
spec:
  ports:
    - port: 9998