apiVersion: apps/v1
kind: Deployment
metadata:
  name: rms-server-dc2
  namespace: rms
  labels:
    app: rms-server
spec:
  replicas: 1
  template:
    metadata:
      name: rms-server
      labels:
        app: rms-server
    spec:
      nodeSelector:
        zone: dc2
      securityContext:
        runAsUser: 0
      containers:
        - name: rms-server
          image: 192.168.160.47:8888/rms/rms-server:1.9
          imagePullPolicy: Always
          env:
            - name: RMS_MODE
              value: "drill"
          startupProbe:
            httpGet:
              port: 8080
              path: /metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              port: 8080
              path: /metrics
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: 8080
              path: /metrics
          resources:
            limits:
              cpu: '4'
              memory: 8Gi
            requests:
              cpu: '0.2'
              memory: 1Gi
          lifecycle:
            preStop:
              exec:
                command: [ "sleep" ,"40" ]
          volumeMounts:
            - name: config-volume
              mountPath: /opt/RMSServer_linux/Config
      volumes:
        - name: config-volume
          configMap:
            name: rms-server-configs
      terminationGracePeriodSeconds: 120
      restartPolicy: Always
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
  selector:
    matchLabels:
      app: rms-server