apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: settings.k8s.io/v1alpha1
kind: PodPreset
metadata:
  name: change-timezone
  namespace: test
spec:
  selector:
    matchLabels: { }
  env:
    - name: TZ
      value: "Asia/Shanghai"
  volumeMounts:
    - name: timezone
      mountPath: /etc/localtime
  volumes:
    - name: timezone
      hostPath:
        path: /etc/localtime
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-monitoring
  namespace: test
  labels:
    app: demo-monitoring
    zone: dc1
spec:
  replicas: 1
  template:
    metadata:
      name: demo-monitoring
      labels:
        app: demo-monitoring
        zone: dc1
    spec:
      #部署在DC1机房
      nodeSelector:
        zone: dc1
      #亲和性配置
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - demo-monitoring
      #后端服务TCP连接参数修改
      initContainers:
        - command:
            - sysctl
            - -w
            - net.ipv4.tcp_keepalive_time=10
            - net.ipv4.tcp_keepalive_probes=2
            - net.ipv4.tcp_keepalive_intvl=5
          image: 10.12.107.150:80/public/busybox:1.34
          imagePullPolicy: IfNotPresent
          name: busybox
          securityContext:
            privileged: true
      containers:
        - name: demo-monitoring
          image: "10.12.107.150:80/public/demo-monitoring:1.0"
          imagePullPolicy: Always
          # 三个探针
          startupProbe:
            httpGet:
              port: 8080
              path: /demo-monitoring
            successThreshold: 1
            failureThreshold: 3
            initialDelaySeconds: 30
          livenessProbe:
            httpGet:
              port: 8080
              path: /demo-monitoring
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 3
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              port: 8080
              path: /demo-monitoring
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 3
            timeoutSeconds: 5
          env:
            - name: INTERVAL
              value: '50000'
            - name: IS_LOG
              value: 'false'
          # 容器资源限制
          resources:
            requests:
              cpu: '0.2'
              memory: 200Mi
            limits:
              cpu: '2'
              memory: 500Mi
          #优雅停机
          lifecycle:
            preStop:
              exec:
                command: [ "sleep", "40" ]
      restartPolicy: Always
      terminationGracePeriodSeconds: 120
      imagePullSecrets:
        - name: harbor
       # 节点异常容忍
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
  selector:
    matchLabels:
      app: demo-monitoring
      zone: dc1
---
apiVersion: v1
kind: Service
metadata:
  name: demo-monitoring
  namespace: test
  annotations:
    #告警邮件接收人
    maintainer: "tangjizhou@cicem.fa"
    #prometheus可用性探测监控配置
    prometheus.io/http-probe: "true"
    prometheus.io/http-probe-port: "8080"
    prometheus.io/http-probe-path: "/demo-monitoring/sleep/1"
    #prometheus指标抓取配置
    prometheus.io/scrape: "true"
    prometheus.io/port: '8080'
    prometheus.io/scheme: "http"
    prometheus.io/path: '/demo-monitoring/actuator/prometheus'
spec:
  selector:
    app: demo-monitoring
  ports:
    - port: 8080
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: demo-monitoring
  namespace: test
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: PathPrefix(`/demo-monitoring/`)
      services:
        - name: demo-monitoring
          port: 8080
