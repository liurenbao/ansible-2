---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: elk
  labels:
    task: logging
    k8s-app: logstash
data:
  logstash.yml: |
    pipeline.batch.size: 200
    pipeline.batch.delay: 50
    pipeline.unsafe_shutdown: false
    config.reload.automatic: true
    config.reload.interval: 3s
    queue.type: memory
    http.host: 0.0.0.0
    http.port: 9600
    path.config: /usr/share/logstash/pipeline
    path.data: /usr/share/logstash/data
    pipeline.workers: 8
    xpack.monitoring.enabled: true
    xpack.monitoring.elasticsearch.hosts: {{ groups['es'] | map('regex_replace', '^(.*)$','\\1:9200') | list | to_json}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-pipeline
  name: logstash-pipeline
  namespace: elk
data:
  filter_main.conf: |-
    filter {
      # format message
      grok {
        break_on_match => true
        patterns_dir => ["/usr/share/logstash/patterns"]
        match => { "message" => "%{TIMESTAMP:timestamp}(:)?%{SPACE}\[%{PROG:program}\|%{LOGLEVEL:level}\]" }
        match => { "message" => "%{TIMESTAMP:timestamp}%{SPACE}%{LOGLEVEL:level}" }
        match => { "message" => "\[%{IDENTIFIER:source}\]%{SPACE}(HOST=\[%{HOSTNAME:host}\])?%{SPACE}(RID=\[%{BASE10NUM:rid}\])?%{SPACE}(TIME=\[%{TIMESTAMP:timestamp}\])?%{SPACE}(CLIENT=\[%{IDENTIFIER:client}\])?%{SPACE}(Type=\[%{WORD:level}\])?%{SPACE}(SVC=\[%{IDENTIFIER:svc}\])?%{SPACE}(DurTime=\[%{BASE10NUM:DurTime}\])?" }
      }

      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
        target => "@timestamp"
      }

    }
  input_main.conf: |-
    input {
      kafka {
        id => "kafka"
        client_id => "kafka"
        bootstrap_servers => "{{ groups['kafka'] | map('regex_replace', '^(.*)$','\\1:9092') | list | join(',') }}"
        topics => ["log"]
        type => "log"
        codec => json { charset => "UTF-8" }
        consumer_threads => 3
        auto_offset_reset => earliest
        decorate_events => false
      }
    }
  output_main.conf: |-
    output {
      # stdout { codec => rubydebug }
      elasticsearch {
        hosts => {{ groups['es'] | map('regex_replace', '^(.*)$','\\1:9200') | list | to_json}}
        manage_template => true
        template_name => "app-log"
        index => "log-%{[kubernetes][labels][app]}-%{[kubernetes][namespace]}-%{+YYYY-MM}-%{+xxxx-ww}"
        document_type => "%{[@metadata][type]}"
      }
    }
---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-patterns
  name: logstash-patterns
  namespace: elk
data:
  main: |-
    FULLYEAR (?>\d\d){2}
    TIMESTAMP %{FULLYEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?
    IDENTIFIER [0-9a-zA-Z\.\-_]*
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: elk
spec:
  replicas: 5
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: "{{ image_repository }}/public/logstash:7.13.2"
          imagePullPolicy: Always
          resources:
            limits:
              memory: '4Gi'
              cpu: '4'
            requests:
              memory: '500Mi'
              cpu: '200m'
          volumeMounts:
            - name: logstash-pipeline
              mountPath: /usr/share/logstash/pipeline
            - name: logstash-config
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
            - name: logstash-patterns
              mountPath: /usr/share/logstash/patterns
      volumes:
        - name: logstash-config
          configMap:
            name: logstash-config
        - name: logstash-pipeline
          configMap:
            name: logstash-pipeline
        - name: logstash-patterns
          configMap:
            name: logstash-patterns
      securityContext:
        runAsUser: 0
        fsGroup: 1000
  selector:
    matchLabels:
      app: logstash