---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: elk
  labels:
    task: logging
    k8s-app: logstash
data:
  logstash.yml: |
    pipeline.batch.size: 2000
    pipeline.batch.delay: 1000
    pipeline.unsafe_shutdown: false
    config.reload.automatic: true
    config.reload.interval: 3s
    queue.type: memory
    http.host: 0.0.0.0
    http.port: 9600
    path.config: /usr/share/logstash/pipeline
    path.data: /usr/share/logstash/data
    pipeline.workers: 8
    xpack.monitoring.enabled: true
    xpack.monitoring.elasticsearch.hosts: {{ es_hosts_arr }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-pipeline
  name: logstash-pipeline
  namespace: elk
data:
  filter_main.conf: |-
    filter {
      grok {
        break_on_match => true
        tag_on_failure => []
        match => { "[log][file][path]" => "/var/log/gaussdb/omm/%{DATA:logDir}/%{GREEDYDATA}" }
      }
    }
    filter {
      grok {
        break_on_match => true
        tag_on_failure => ["_grokparsefailure"]
        tag_on_timeout => ["_groktimeout"]
        patterns_dir => ["/usr/share/logstash/patterns"]
        match => { "message" => "%{TIMESTAMP:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}-%{SPACE}\[%{DATA:trace_id}\]%{SPACE}\[%{DATA:thread_id}\]" }
        match => { "message" => "%{TIMESTAMP:timestamp}(:)?%{SPACE}\[%{PROG:program}\|%{LOGLEVEL:level}\]" }
        match => { "message" => "\[%{MES_SOURCE:SOURCE}\]%{SPACE}%{DATA:kv_message}\n%{GREEDYDATA:content}" }
        match => { "message" => "%{NGINX_ERROR_TIMESTAMP:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{GREEDYDATA}" }
        match => { "message" => "%{TIMESTAMP:timestamp}%{SPACE}%?\[?%{LOGLEVEL:level}\]?" }
        match => { "message" => "%{IMPRECISE_TIMESTAMP:timestamp}%{GREEDYDATA}" }
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}%{GREEDYDATA}" }
        match => { "message" => "%{TIMESTAMP:timestamp}%{GREEDYDATA}" }
      }
      kv {
        source => "kv_message"
        allow_duplicate_values => false
        include_brackets => false
        recursive => false
        trim_value => "\[\]"
        trim_key => "\s+"
        field_split_pattern => "\]"
      }
      date {
        match => [ "TIME", "yyyy-MM-dd HH:mm:ss.SSS" ]
        target => "@timestamp"
        tag_on_failure => ["_dateparsefailure"]
      }
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss:SSS",
                  "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss'+08:00'", "yyyy-MM-dd'T'HH:mm:ss.SSS'+0800'",
                  "yyyy-MM-dd'T'HH:mm:ss'+08:00'", "yyyy-MM-dd HH:mm:ss.SSSSS", "yyyy/MM/dd HH:mm:ss", "ISO8601"]
        target => "@timestamp"
        tag_on_failure => ["_dateparsefailure"]
      }
      mutate {
        remove_field => [ "kv_message", "content", "[kubernetes][node][uid]", "[kubernetes][labels][pod-template-hash]",
            "[kubernetes][pod][uid]", "[kubernetes][pod][ip]", "[kubernetes][namespace_uid]","[kubernetes][node][labels]", "stream"  ]
      }
    }
  input_main.conf: |-
    input {
      kafka {
        id => "kafka"
        client_id => "kafka"
        bootstrap_servers => '{{ kafka_hosts_str }}'
        topics => ["log"]
        type => "log"
        codec => json { charset => "UTF-8" }
        consumer_threads => 8
        auto_offset_reset => earliest
        decorate_events => false
      }
    }
  output_main.conf: |-
    output {
      # stdout { codec => rubydebug }
      elasticsearch {
        hosts => {{ es_hosts_arr }}
        manage_template => true
        template_name => "app-log"
        index => "log-%{[kubernetes][labels][app]}-%{[kubernetes][namespace]}-%{+YYYY-MM}"
        document_type => "%{[@metadata][type]}"
      }
    }
---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-patterns
  name: logstash-patterns
  namespace: elk
data:
  main: |-
    FULLYEAR (?>\d\d){2}
    TIMESTAMP %{FULLYEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE}?
    NGINX_ERROR_TIMESTAMP %{FULLYEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}
    MES_SOURCE (SQL|SYSTEM|SERVICE)
    IMPRECISE_TIMESTAMP %{FULLYEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:%{MINUTE}:%{SECOND}\.\d{3}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: elk
spec:
  replicas: 5
  template:
    metadata:
      labels:
        app: logstash
    spec:
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 2
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - logstash
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: logstash
      containers:
        - name: logstash
          image: "{{ image_repository }}/public/logstash:7.16.2"
          imagePullPolicy: Always
          resources:
            limits:
              memory: '4Gi'
              cpu: '4'
            requests:
              memory: '500Mi'
              cpu: '200m'
          volumeMounts:
            - name: logstash-pipeline
              mountPath: /usr/share/logstash/pipeline
            - name: logstash-config
              mountPath: /usr/share/logstash/config/logstash.yml
              subPath: logstash.yml
            - name: logstash-patterns
              mountPath: /usr/share/logstash/patterns
          lifecycle:
            preStop:
              exec:
                command: [ "sleep", "40" ]
      terminationGracePeriodSeconds: 120
      volumes:
        - name: logstash-config
          configMap:
            name: logstash-config
        - name: logstash-pipeline
          configMap:
            name: logstash-pipeline
        - name: logstash-patterns
          configMap:
            name: logstash-patterns
      securityContext:
        runAsUser: 0
        fsGroup: 1000
  selector:
    matchLabels:
      app: logstash
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: logstash
  namespace: elk
spec:
  maxReplicas: 10
  minReplicas: 5
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: logstash
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80