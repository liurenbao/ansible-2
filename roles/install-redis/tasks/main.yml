- name: clean old redis docker files
  file:
    path: '{{ redis_data_dir }}'
    state: absent

- name: somaxconneconn
  shell: echo 511 > /proc/sys/net/core/somaxconn

- name: copy docker compose
  shell: mkdir -p {{ redis_data_dir }}/data

- name: copy docker compose
  template: src=docker-compose.yml.j2 dest={{ redis_data_dir }}/docker-compose.yml

- name: copy redis
  template: src=redis.conf.j2 dest={{ redis_data_dir }}/redis.conf

- name: hugepage never
  shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled

- name: sysctl redis.conf
  template:
    src: redis-conn.conf.j2
    dest: /etc/sysctl.d/redis-conn.conf

- name: sysctl redis-conn.conf
  shell: sysctl --system

- name: copy join command
  template:
    src: create-cluster.sh.j2
    dest: "{{ redis_data_dir }}/create-cluster.sh"

- name: chmod create-cluster shell
  command: chmod +x {{ redis_data_dir }}/create-cluster.sh

- name: chown redis dir
  file:
    path: '{{ redis_data_dir }}'
    owner: '{{ cim_ops_user }}'
    group: docker
    recurse: yes

- name: stop redis
  become_user: '{{ cim_ops_user }}'
  shell: docker-compose down
  args:
    chdir: "{{ redis_data_dir }}"

- name: start redis
  become_user: '{{ cim_ops_user }}'
  shell: docker-compose up -d
  args:
    chdir: "{{ redis_data_dir }}"

- name: validate redis
  become_user: '{{ cim_ops_user }}'
  shell: sleep 10 && docker-compose ps
  args:
    chdir: "{{ redis_data_dir }}"
  register: check

- name: show
  debug: var=check.stdout verbosity=0

- name: chmod
  command: sh create-cluster.sh
  args:
    chdir: "{{ redis_data_dir }}"
  when: ansible_ssh_host == groups['redis'][0]

- name: get cluster info
  become_user: '{{ cim_ops_user }}'
  shell: docker exec -i redis-node01 /bin/sh -c 'redis-cli cluster info'
  register: redis_cluster_info

- name: show cluster info
  debug:
    msg: "{{ redis_cluster_info }}"
  when: ansible_ssh_host == groups['redis'][0]

- name: redis cluster info
  become_user: '{{ cim_ops_user }}'
  shell: docker-compose exec -T redis-cluster /bin/sh -c 'redis-cli cluster info' | grep cluster_state
  args:
    chdir: "{{ redis_data_dir }}"
  register: result
  failed_when: ' "cluster_state:ok" not in result.stdout'