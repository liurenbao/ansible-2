kind: Deployment
apiVersion: apps/v1
metadata:
  name: logstash-kafka
  namespace: elk
  labels:
    app: logstash-kafka
spec:
  replicas: 5
  selector:
    matchLabels:
      app: logstash-kafka
  template:
    metadata:
      labels:
        app: logstash-kafka
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kafka-installed
                    operator: DoesNotExist
      volumes:
        - name: patterns
          configMap:
            name: logstash-kafka-patterns
            defaultMode: 420
        - name: files
          configMap:
            name: logstash-kafka-files
            defaultMode: 420
        - name: pipeline
          configMap:
            name: logstash-kafka-pipeline
            defaultMode: 420
        - name: logstash-kafka-conf
          configMap:
            name: logstash-kafka-conf
            defaultMode: 420
        - name: data
          emptyDir: { }
      containers:
        - name: logstash-kafka
          resources:
            requests:
              cpu: 1000m
          image: 'docker.elastic.co/logstash/logstash:7.9.2'
          ports:
            - name: monitor
              containerPort: 9600
              protocol: TCP
            - name: beats
              containerPort: 5044
              protocol: TCP
          env:
            - name: HTTP_HOST
              value: 0.0.0.0
            - name: HTTP_PORT
              value: '9600'
            - name: LS_JAVA_OPTS
              value: '-Xmx5g -Xms5g'
            - name: CONFIG_RELOAD_AUTOMATIC
              value: 'true'
            - name: PATH_CONFIG
              value: /usr/share/logstash/pipeline
            - name: PATH_DATA
              value: /usr/share/logstash/data
            - name: QUEUE_DRAIN
              value: 'true'
            - name: QUEUE_MAX_BYTES
              value: 1g
            - name: PIPELINE_WORKERS
              value: '9'
            - name: PIPELINE_BATCH_SIZE
              value: '200'
            - name: XPACK_MONITORING_COLLECTION_ENABLED
              value: "true"
            - name: XPACK_MONITORING_ENABLED
              value: "true"
            - name: XPACK_MONITORING_ELASTICSEARCH_HOSTS
              valueFrom:
                configMapKeyRef:
                  key: es-hosts
                  name: logstash-kafka-conf
            - name: XPACK_MONITORING_ELASTICSEARCH_URL
              valueFrom:
                configMapKeyRef:
                  key: es-hosts
                  name: logstash-kafka-conf
          volumeMounts:
            - name: data
              mountPath: /usr/share/logstash/data
            - name: patterns
              mountPath: /usr/share/logstash/patterns
            - name: files
              mountPath: /usr/share/logstash/files
            - name: pipeline
              mountPath: /usr/share/logstash/pipeline
          livenessProbe:
            httpGet:
              path: /
              port: monitor
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /
              port: monitor
              scheme: HTTP
          imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 0
        fsGroup: 1000
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: logstash-kafka-files
  name: logstash-kafka-files
  namespace: elk
---
apiVersion: v1
data:
  main: |-
    LOGLEVEL ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)
    NUMBER (?:%{BASE10NUM})
    JAVATHREAD (?:[A-Z]{2}-Processor[\d]+)
    SPACE \s*
    CATALINALOG %{CATALINA_DATESTAMP:timestamp} %{JAVACLASS:class} %{JAVALOGMESSAGE:logmessage}
    JAVACLASS (?:[a-zA-Z$_\.][a-zA-Z$_0-9]*\.)*[a-zA-Z$_][a-zA-Z$_0-9]*
kind: ConfigMap
metadata:
  labels:
    app: logstash-kafka-patterns
  name: logstash-kafka-patterns
  namespace: elk
---
apiVersion: v1
data:
  filter_main.conf: |-
    filter {
      grok {
        patterns_dir => ["/usr/share/logstash/patterns"]
        match => {
          "message" => "%{DATESTAMP:DATE}%{SPACE}%{LOGLEVEL:LEVEL}%{SPACE}%{NUMBER}%{GREEDYDATA}]%{JAVACLASS:class}%{SPACE}\\:%{SPACE}%{GREEDYDATA:MESSAGE}"
        }
      }
    }
  input_main.conf: |-
    input {
      kafka {
        bootstrap_servers => "10.28.114.39:9092,7.185.18.132:9092,7.185.18.25:9092"
        codec => json { charset => "UTF-8" }
        consumer_threads => 3
        group_id => "logstash-kafka-0"
        topics => ["k8s-log-test"]
        type => "app-log"
        auto_offset_reset => earliest
        decorate_events => false
      }
    }
  output_main.conf: |-
    output {
      #stdout { codec => rubydebug }
      elasticsearch {
        hosts => ["7.185.17.125:9200","7.185.17.147:9200","7.185.19.69:9200"]
        manage_template => false
        index => "k8s-log-test"
      }
    }
kind: ConfigMap
metadata:
  labels:
    app: logstash-kafka-pipeline
  name: logstash-kafka-pipeline
  namespace: elk
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-kafka-conf
  namespace: elk
data:
  es-hosts: |-
    - http://7.185.17.125:9200
    - http://7.185.17.147:9200
    - http://7.185.19.69:9200

---
kind: Service
apiVersion: v1
metadata:
  name: logstash-kafka
  namespace: elk
  labels:
    app: logstash-kafka
spec:
  ports:
    - name: beats
      protocol: TCP
      port: 5044
      targetPort: beats
  selector:
    app: logstash-kafka
---
